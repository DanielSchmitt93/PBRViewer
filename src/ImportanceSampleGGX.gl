
// Efficient VanDerCorpus calculation.
// See: http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
float RadicalInverse_VdC(uint bits) 
{
     bits = (bits << 16u) | (bits >> 16u);
     bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
     bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
     bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
     bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
     return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

// vec2.x contains the ratio of sample to total amount of samples
// vec2.y contains the associated radical inverse of the sample number (binary representation mirrored around the decimal point)
vec2 Hammersley(uint i, const uint N)
{
	return vec2(float(i) / float(N), RadicalInverse_VdC(i));
}

// This method is based on the implementation by Unreal Engine 4.
// See "Real Shading in Unreal Engine 4"
vec3 ImportanceSampleGGX(const uint iteration, const uint sampleAmout, const vec3 N, const float roughness)
{
	vec2 Xi = Hammersley(iteration, sampleAmout);
	float a = roughness * roughness;
	
	float phi = 2.0f * Pi * Xi.x;
	float cosTheta = sqrt((1.0f - Xi.y) / (1.0 + (a * a - 1.0f) * Xi.y));
	float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
	
	// from spherical coordinates to cartesian coordinates - halfway vector
	vec3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;
	
	// from tangent-space H vector to world-space sample vector
	vec3 up        = abs(N.z) < 0.999f ? vec3(0.0f, 0.0f, 1.0f) : vec3(1.0f, 0.0f, 0.0f);
	vec3 tangent   = normalize(cross(up, N));
	vec3 bitangent = cross(N, tangent);
	
	vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
	return normalize(sampleVec);
}