
float CalculateShadowCoverage(const vec4 fragPosLightSpace, const vec3 lightPos, const vec3 n, const int numberOfShadowMap)
{   
	if(false == shadowsEnabled)
	{
		return 0.0f;
	}	
	
    // Perform perspective divide.	
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    
	// Transform to [0,1] range.
    projCoords = projCoords * 0.5f + 0.5f;
    
	// Get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;

	// The bias depends on the angle between the light source (from which the shadows were generated) and the surface normal of the fragment. 
	// If the light vector is orthogonal to the fragment normal, only a small bias value is used. 
	// The larger the angle between the two vectors, the larger the bias (up to a maximum).
	float bias = max(0.01f * (1.0f - dot(lightPos, n)), 0.001f);  		
    
	float shadow = 0.0f;
	vec2 texelSize = 1.0f / textureSize(textureShadows[numberOfShadowMap], 0);
	
	// Check the nine surounding texels and divide by the number of samples (Percentage-Closer Filtering).	
	// This will create artificial soft shadows that look more realistic than traditional hard shadows from point light sources.
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{
			float pcfDepth = texture(textureShadows[numberOfShadowMap], projCoords.xy + vec2(x, y) * texelSize).r; 
			shadow += currentDepth + bias > pcfDepth ? 1.0f : 0.0f;        
		}    
	}

	shadow /= 9.0f;	
    return shadow;   
}